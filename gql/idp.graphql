extend type Query {
    """
    Returns the list of IdP clients that exist in the system.
    These can be used to authenticate with Sourcegraph.

    Requires IDP_CLIENTS#READ permission.
    """
    idpClients(first: Int = 50, after: String): IDPClientConnection!
    """
    The list of known IdP scopes.
    """
    idpScopes: [IDPScope!]!
    """
    Get device authorization details by user code for the authorization flow.
    Returns the client information and requested scopes that the user needs
    to approve or deny.
    """
    deviceAuthorizationByUserCode(userCode: String!): DeviceAuthorizationDetails
    """
    Get consent details for a consent flow ID from the authorization flow.
    Returns the client information and requested scopes that the user needs
    to approve or deny. Can only be requested by the user who began the authorization
    flow.
    """
    consentDetails(consentID: String!): ConsentDetails
}

extend type Mutation {
    """
    Create a new IdP client. The secret will be returned and can never be accessed
    again.

    Requires IDP_CLIENTS#WRITE permission.
    """
    createIDPClient(
        """
        A descriptive name for the client. Will be shown to users.
        """
        name: String!
        """
        A detailed description of what this client does and why it needs access.
        Will be shown to users on consent screens.
        """
        description: String
        """
        The list of permitted redirect URIs.
        """
        redirectURIs: [String!]!
        """
        The list of scopes this client can request.
        """
        scopes: [String!]!
        """
        Whether this is a public client.

        Public clients don't need to present a client secret. This is suitable for
        single-page applications, mobile apps, and CLI tools. The client supports
        device flow authentication.

        Private clients need to provide the client secret for authorization flows.
        Suitable for server-side applications, internal services, and M2M use-cases.

        This setting cannot be changed after creation.
        """
        public: Boolean!
    ): CreateIDPClientResult!
    """
    Update an existing IdP client.

    Requires IDP_CLIENTS#WRITE permission.
    """
    updateIDPClient(
        """
        The ID of the client to update.
        """
        id: ID!
        """
        A descriptive name for the client. Will be shown to users.
        """
        name: String!
        """
        A detailed description of what this client does and why it needs access.
        Will be shown to users on consent screens.
        """
        description: String
        """
        The list of permitted redirect URIs.
        """
        redirectURIs: [String!]!
        """
        The list of scopes this client can request.
        """
        scopes: [String!]!
    ): IDPClient!
    """
    Delete an existing IdP client. Caution: all access tokens issued by this client
    are no longer usable.

    Requires IDP_CLIENTS#WRITE permission.
    """
    deleteIDPClient(id: ID!): EmptyResponse
    """
    Make a determination for device authorization. Identified by the user code from
    the authorization flow.
    """
    resolveDeviceAuthorization(
        """
        The user code associated with the authorization request to respond to.
        """
        userCode: String!
        """
        Whether to approve the request.
        """
        approve: Boolean!
    ): EmptyResponse
    """
    Revoke the UserConsentedIDPClient consent.
    This will invalidate all access tokens and refresh tokens issued to this client
    for the current user, and force a consent prompt for the next authorization flow.

    Can only be called by the user who owns the consent, or a site-admin.
    """
    revokeIDPClientConsent(consentID: ID!): EmptyResponse
    """
    Create a new M2M (Machine-to-Machine) credential for a service account.
    This creates an IDP client that can use client credentials flow to obtain
    access tokens with the service account as the subject.

    Requires IDP_CLIENTS#WRITE_IMPERSONATION permission.
    """
    createM2MCredential(
        """
        The ID of the service account for which to create the M2M credential.
        """
        userID: ID!
        """
        A descriptive name for the credential. Will be shown in the credentials list.
        """
        name: String!
        """
        A detailed description of what this credential is used for.
        """
        description: String
        """
        The list of scopes this credential can request.
        """
        scopes: [String!]!
    ): CreateM2MCredentialResult!
    """
    Delete an M2M credential for a service account.
    This will delete the associated IDP client and invalidate all access tokens.

    Requires IDP_CLIENTS#WRITE_IMPERSONATION permission.
    """
    deleteM2MCredential(id: ID!): EmptyResponse
}

extend type User {
    """
    Get the list of consents for IdP clients that this user has granted.
    These IdP clients can complete an authorization code flow without consent again
    and access tokens for these IdPs and the user as subject are permitted.

    Can only be called by the user themselves, or a site-admin.
    """
    consentedIDPClients(first: Int = 50, after: String): UserConsentedIDPClientConnection!
    """
    Get the list of M2M (Machine-to-Machine) credentials for this service account.
    Each credential corresponds to an IDP client that can use the client credentials
    flow to obtain access tokens with this service account as the subject.

    Only available for service accounts and requires IDP_CLIENTS#READ permission.
    """
    m2mCredentials(first: Int = 50, after: String): M2MCredentialConnection!
}

"""
The result type for creating a new client. Contains the client and the secret.
"""
type CreateIDPClientResult {
    """
    The created client.
    """
    client: IDPClient!
    """
    The client secret, only accessible in this response and never again.
    """
    clientSecret: String!
}

"""
IdP client represents one client of the Sourcegraph IdP. It can be used via OAuth.
"""
type IDPClient implements Node {
    """
    An opaque identifier.
    """
    id: ID!
    """
    The client identifier used for OAuth/OIDC flows.
    """
    clientID: String!
    """
    A descriptive name for the client. Shown to users.
    """
    name: String!
    """
    A detailed description of what this client does and why it needs access.
    Shown to users on consent screens.
    """
    description: String
    """
    The list of permitted redirect URIs.
    """
    redirectURIs: [String!]!
    """
    The list of permitted response types.
    """
    responseTypes: [String!]!
    """
    The list of permitted scopes for this client.
    """
    scopes: [String!]!
    """
    Whether this is a public client.

    Public clients don't need to present a client secret. This is suitable for
    single-page applications, mobile apps, and CLI tools. The client supports
    device flow authentication.

    Private clients need to provide the client secret for authorization flows.
    Suitable for server-side applications, internal services, and M2M use-cases.
    """
    public: Boolean!
    """
    The list of acceptable audiences of this client.
    """
    audience: [String!]!
    """
    The time the client was created.
    """
    createdAt: DateTime!
    """
    The time the client was last updated.
    """
    updatedAt: DateTime!
}

"""
A list of IdP clients.
"""
type IDPClientConnection {
    """
    The current page.
    """
    nodes: [IDPClient!]!
    """
    The total number of nodes in this connection.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
Descriptive object that describes one available IdP scope.
"""
type IDPScope {
    """
    The official name of the scope in the API.
    """
    name: String!
    """
    Short, descriptive text describing the scope.
    """
    description: String!
}

"""
Device authorization details for a specific user code.
Contains information about the client requesting access and the scopes being requested.
"""
type DeviceAuthorizationDetails {
    """
    The client requesting authorization.
    """
    client: IDPClient!
    """
    The scopes being requested by the client.
    """
    requestedScopes: [IDPScope!]!
    """
    Whether this authorization request is still valid (not expired, not already processed).
    """
    isValid: Boolean!
}

"""
Consent details for an authorization code flow.
Contains information about the client requesting access and the scopes being requested.
"""
type ConsentDetails {
    """
    The client requesting authorization.
    """
    client: IDPClient!
    """
    The scopes being requested by the client.
    """
    requestedScopes: [IDPScope!]!
}

"""
Represents a user's consent record for an IdP client.
Contains information about what scopes were granted and when.
"""
type UserConsentedIDPClient implements Node {
    """
    The unique identifier for this consent record.
    """
    id: ID!
    """
    The IdP client that the user consented to.
    """
    client: IDPClient!
    """
    The scopes that the user granted to this client.
    """
    grantedScopes: [IDPScope!]!
    """
    The time when the user first granted consent to this client.
    """
    consentedAt: DateTime!
}

"""
A paginated list of user consented IdP clients.
"""
type UserConsentedIDPClientConnection {
    """
    The current page of consented clients.
    """
    nodes: [UserConsentedIDPClient!]!
    """
    The total number of consented clients for this user.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
Represents an M2M (Machine-to-Machine) credential for a service account.
Each credential corresponds to an IDP client that can use client credentials flow.
"""
type M2MCredential implements Node {
    """
    The unique identifier for this M2M credential.
    """
    id: ID!
    """
    A descriptive name for the credential.
    """
    name: String!
    """
    A detailed description of what this credential is used for.
    """
    description: String
    """
    The underlying IDP client that implements this credential.
    """
    client: IDPClient!
    """
    The scopes that this credential can request.
    """
    scopes: [IDPScope!]!
    """
    The time when this credential was created.
    """
    createdAt: DateTime!
    """
    The time when this credential was last updated.
    """
    updatedAt: DateTime!
}

"""
A paginated list of M2M credentials.
"""
type M2MCredentialConnection {
    """
    The current page of M2M credentials.
    """
    nodes: [M2MCredential!]!
    """
    The total number of M2M credentials for this service account.
    """
    totalCount: Int!
    """
    Pagination information.
    """
    pageInfo: PageInfo!
}

"""
The result type for creating a new M2M credential. Contains the credential and
the client secret.
"""
type CreateM2MCredentialResult {
    """
    The created M2M credential.
    """
    credential: M2MCredential!
    """
    The client secret for the underlying IDP client, only accessible in this
    response and never again.
    This is used for client credentials flow authentication.
    """
    clientSecret: String!
}
