extend type Query {
    """
    Get a list of context related to the query from a set of repositories. This is the first list from getCodyContextAlternatives
    """
    getCodyContext(
        """
        The repositories to search.
        """
        repos: [ID!]!
        """
        An optional list of file patterns used to filter the results. The
        patterns are regex strings. For a file chunk to be returned a context
        result, the path must match at least one of these patterns.
        """
        filePatterns: [String!]
        """
        A natural language query string.
        """
        query: String!
        """
        The number of code results to return.
        """
        codeResultsCount: Int!
        """
        The number of text results to return. Text results contain Markdown files and similar file types primarily used for writing documentation.
        """
        textResultsCount: Int!
        """
        The version number of the context API
        """
        version: String
    ): [CodyContextResult!]!

    """
    Get lists of context related to the query from a set of repositories.
    """
    getCodyContextAlternatives(
        """
        The repositories to search.
        """
        repos: [ID!]!
        """
        An optional list of file patterns used to filter the results. The
        patterns are regex strings. For a file chunk to be returned a context
        result, the path must match at least one of these patterns.
        """
        filePatterns: [String!]
        """
        A natural language query string.
        """
        query: String!
        """
        The number of code results to return.
        """
        codeResultsCount: Int!
        """
        The number of text results to return. Text results contain Markdown files and similar file types primarily used for writing documentation.
        """
        textResultsCount: Int!
        """
        The version number of the context API
        """
        version: String
    ): CodyContextAlternativesResult!

    """
    EXPERIMENTAL: Detect intent for a given Cody chat query.
    """
    chatIntent(
        """
        A natural language query string.
        """
        query: String!
        """
        Cody interaction ID - used to join requests for intent detection/context fetching/ranking.
        """
        interactionId: String!
    ): ChatIntentResponse!

    """
    EXPERIMENTAL: Fetches the relevant context for a mentioned URL
    """
    urlMentionContext(url: String!): URLMentionContextResult!
}

"""
EXPERIMENTAL: A single piece of context. It's defined as a union so we can
return other types of context in the future (think code intel definition
or wiki page).
"""
union CodyContextResult = FileChunkContext

"""
EXPERIMENTAL: The result from the Cody context alternatives API, which returns a list
of context lists, each of which represents a distinct context list that could have been
used. The first list is the one that should actually be used.
"""
type CodyContextAlternativesResult {
    """
    List of context lists
    """
    contextLists: [CodyContextList!]!
}

"""
EXPERIMENTAL: A named list of context items.
"""
type CodyContextList {
    """
    Name of the list
    """
    name: String!

    """
    List of context items
    """
    contextItems: [CodyContextResult!]!
}

"""
A piece of context that represents a chunk of a file in a git repository
"""
type FileChunkContext {
    """
    The git blob this file is associated with
    """
    blob: GitBlob!
    """
    The start line of the relevant chunk (inclusive).
    """
    startLine: Int!
    """
    The end line of the relevant chunk (exclusive).
    """
    endLine: Int!
    """
    The relevant content of the file from start line to end line.
    """
    chunkContent: String!
    """
    The portions of the chunk that matched the query specifically (if any).
    Ranges are relative to the start of the file, not the start of the chunk.
    """
    matchedRanges: [Range!]!
}

"""
EXPERIMENTAL: An intent-score pair from Cody Chat intent detection API.
"""
type IntentScore {
    """
    The intent that was detected
    """
    intent: String!
    """
    The confidence score
    """
    score: Float!
}

"""
EXPERIMENTAL: A response from Cody Chat intent detection API.
"""
type ChatIntentResponse {
    """
    Intent that was detected
    """
    intent: String!
    """
    Confidence score as assigned by the intent detection model
    """
    score: Float!
    """
    Confidence score assigned by the "code search" intent detection model (the higher the score, the more likely it is that the query is about code search).
    """
    searchScore: Float!
    """
    Confidence score assigned by the "edit" intent detection model (the higher the score, the more likely it is that the query is about an edit command).
    """
    editScore: Float!
    """
    All intents and scores computed by the intent detection model
    """
    allScores: [IntentScore!]!
}

"""
EXPERIMENTAL: The result of fetching context for a URL mention
"""
type URLMentionContextResult {
    """
    The extracted title of the page, if it exists
    """
    title: String
    """
    The content of the page in its processed and truncated form.
    Not guaranteed to be in any particular format.
    """
    content: String!
}
